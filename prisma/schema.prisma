generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activity_log {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  log_name     String?   @db.VarChar(255)
  description  String    @db.Text
  subject_type String?   @db.VarChar(255)
  event        String?   @db.VarChar(255)
  subject_id   BigInt?   @db.UnsignedBigInt
  causer_type  String?   @db.VarChar(255)
  causer_id    BigInt?   @db.UnsignedBigInt
  properties   Json?
  batch_uuid   String?   @db.Char(36)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)

  @@index([log_name], map: "activity_log_log_name_index")
  @@index([causer_type, causer_id], map: "causer")
  @@index([subject_type, subject_id], map: "subject")
}

model addresses {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  city       String   @db.VarChar(255)
  street     String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @db.DateTime(0)
}

model coefficients {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  valeur     Int
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @db.DateTime(0)
}

model comptes {
  id                             BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                        BigInt         @db.UnsignedBigInt
  portefeuille_id                BigInt         @db.UnsignedBigInt
  portefeuille_investissement_id BigInt         @db.UnsignedBigInt
  statut                         comptes_statut
  devise                         String         @default("USD") @db.VarChar(255)
  created_at                     DateTime       @default(now()) @db.DateTime(0)
  updated_at                     DateTime       @db.DateTime(0)
}

model contacts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  nom        String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  sujet      String    @db.VarChar(255)
  message    String    @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model countries {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @unique(map: "countries_name_unique") @db.VarChar(255)
  dial_code  String?   @unique(map: "countries_dial_code_unique") @db.VarChar(255)
  code       String    @unique(map: "countries_code_unique") @db.VarChar(255)
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @default(now()) @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  users      users[]
}

model discussion_owners {
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  discussion_id BigInt      @db.UnsignedBigInt
  user_id       BigInt      @db.UnsignedBigInt
  muted         Boolean     @default(false)
  created_at    DateTime    @default(now()) @db.DateTime(0)
  updated_at    DateTime    @default(now()) @db.DateTime(0)
  discussions   discussions @relation(fields: [discussion_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discussion_owners_discussion_id_foreign")
  users         users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "discussion_owners_user_id_foreign")

  @@index([discussion_id], map: "discussion_owners_discussion_id_foreign")
  @@index([user_id], map: "discussion_owners_user_id_foreign")
}

model discussions {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  token             String              @unique(map: "discussions_token_unique") @db.VarChar(255)
  type              discussions_type    @default(personal)
  name              String?             @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.DateTime(0)
  updated_at        DateTime            @default(now()) @db.DateTime(0)
  discussion_owners discussion_owners[]
  messages          messages[]
}

model document_autorises {
  id         BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  libelle    String                  @db.VarChar(255)
  type       document_autorises_type @unique(map: "document_autorises_type_unique")
  created_at DateTime                @default(now()) @db.DateTime(0)
  updated_at DateTime                @db.DateTime(0)
  documents  documents[]
}

model documents {
  id                   BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  user_id              BigInt             @db.UnsignedBigInt
  document_autorise_id BigInt             @db.UnsignedBigInt
  statuts              documents_statuts  @default(enum_DOCUMENT_STATUS_PENDING)
  path                 String             @db.VarChar(255)
  created_at           DateTime?          @db.Timestamp(0)
  updated_at           DateTime?          @db.Timestamp(0)
  document_autorises   document_autorises @relation(fields: [document_autorise_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "documents_document_autorise_id_foreign")
  users                users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "documents_user_id_foreign")

  @@index([document_autorise_id], map: "documents_document_autorise_id_foreign")
  @@index([user_id], map: "documents_user_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model gains {
  id              BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         BigInt   @db.UnsignedBigInt
  tirage_id       BigInt   @db.UnsignedBigInt
  montant         String   @db.VarChar(255)
  montant_numeric Float
  created_at      DateTime @default(now()) @db.DateTime(0)
  updated_at      DateTime @db.DateTime(0)
}

model jackpots {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  roue_id    BigInt   @db.UnsignedBigInt
  montant    Float
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @db.DateTime(0)
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model message_owners {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  initiator  Boolean  @default(true)
  readed     Boolean  @default(false)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  message_id BigInt   @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  messages   messages @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_owners_message_id_foreign")
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_owners_user_id_foreign")

  @@index([message_id], map: "message_owners_message_id_foreign")
  @@index([user_id], map: "message_owners_user_id_foreign")
}

model messages {
  id             BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  discussion_id  BigInt           @db.UnsignedBigInt
  message        String           @db.LongText
  created_at     DateTime         @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(now()) @db.DateTime(0)
  message_owners message_owners[]
  discussions    discussions      @relation(fields: [discussion_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "messages_discussion_id_foreign")

  @@index([discussion_id], map: "messages_discussion_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model model_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  model_type    String      @db.VarChar(255)
  model_id      BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_permissions_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    BigInt @db.UnsignedBigInt
  model_type String @db.VarChar(255)
  model_id   BigInt @db.UnsignedBigInt
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_roles_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model payment_methods {
  id         BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  libelle    payment_methods_libelle
  created_at DateTime                @default(now()) @db.DateTime(0)
  updated_at DateTime                @db.DateTime(0)
}

model payments {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  payment_method_id BigInt          @db.UnsignedBigInt
  montant           Float
  statut            payments_statut @default(enum_PAYMENT_STATUS_PENDING)
  created_at        DateTime        @default(now()) @db.DateTime(0)
  updated_at        DateTime        @db.DateTime(0)
}

model pays_document_autorises {
  id                   BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  country_id           BigInt   @db.UnsignedBigInt
  document_autorise_id BigInt   @db.UnsignedBigInt
  created_at           DateTime @default(now()) @db.DateTime(0)
  updated_at           DateTime @db.DateTime(0)
}

model permissions {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String                  @db.VarChar(255)
  description           String                  @db.Text
  guard_name            String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]

  @@unique([name, guard_name], map: "permissions_name_guard_name_unique")
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model portefeuille_investissements {
  id              BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  balance_libelle String   @db.VarChar(255)
  balance_numeric Float
  created_at      DateTime @default(now()) @db.DateTime(0)
  updated_at      DateTime @db.DateTime(0)
}

model portefeuilles {
  id              BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  balance_libelle String   @db.VarChar(255)
  balance_numeric Float
  created_at      DateTime @default(now()) @db.DateTime(0)
  updated_at      DateTime @db.DateTime(0)
}

model referals {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @db.DateTime(0)
}

model role_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  role_id       BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String                 @db.VarChar(255)
  description          String                 @db.Text
  guard_name           String                 @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]

  @@unique([name, guard_name], map: "roles_name_guard_name_unique")
}

model roues {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  intitule    String   @db.VarChar(255)
  description String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.DateTime(0)
  updated_at  DateTime @db.DateTime(0)
}

model telephones {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  code       String   @db.VarChar(255)
  telephone  String   @unique(map: "telephones_telephone_unique") @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @db.DateTime(0)
}

model ticket_categories {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  categorie  String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @db.DateTime(0)
}

model ticket_jackpots {
  id             BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  jackpot_id     BigInt   @db.UnsignedBigInt
  coefficient_id BigInt   @db.UnsignedBigInt
  created_at     DateTime @default(now()) @db.DateTime(0)
  updated_at     DateTime @db.DateTime(0)
}

model ticket_prices {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  libelle      String   @db.VarChar(255)
  prix         Float
  devise       String   @db.VarChar(255)
  is_promotion Boolean
  created_at   DateTime @default(now()) @db.DateTime(0)
  updated_at   DateTime @db.DateTime(0)
}

model tickets {
  id                  BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt          @db.UnsignedBigInt
  tirage_id           BigInt          @db.UnsignedBigInt
  ticket_price_id     BigInt          @db.UnsignedBigInt
  ticket_categorie_id BigInt          @db.UnsignedBigInt
  paiement_id         BigInt          @db.UnsignedBigInt
  type                tickets_type    @default(enum_TICKET_TYPE_NORMAL)
  statut              tickets_statut  @default(enum_TICKET_STATUS_ACTIF)
  gagnant             tickets_gagnant @default(enum_TICKET_GAGNANT_NON_DEFINI)
  created_at          DateTime        @default(now()) @db.DateTime(0)
  updated_at          DateTime        @db.DateTime(0)
}

model tickets_draws {
  id                    BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  coefficient_id        BigInt   @db.UnsignedBigInt
  winning_id            BigInt   @db.UnsignedBigInt
  nombre_ticket_a_tirer Int
  created_at            DateTime @default(now()) @db.DateTime(0)
  updated_at            DateTime @db.DateTime(0)
}

model tirages {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  roue_id      BigInt         @db.UnsignedBigInt
  date_tirage  DateTime       @db.Date
  heure_tirage DateTime       @db.Time(0)
  statut       tirages_statut @default(enum_TIRAGE_STATUS_ATTENTE)
  type         tirages_type   @default(enum_TICKET_TYPE_NORMAL)
  created_at   DateTime       @default(now()) @db.DateTime(0)
  updated_at   DateTime       @db.DateTime(0)
}

model users {
  id                  BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  country_id          BigInt                    @db.UnsignedBigInt
  pseudo              String                    @unique(map: "users_pseudo_unique") @db.VarChar(255)
  name                String                    @db.VarChar(255)
  first_name          String                    @db.VarChar(255)
  birth_date          DateTime                  @db.Date
  email               String                    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at   DateTime?                 @db.Timestamp(0)
  password            String                    @db.VarChar(255)
  referal_link        String?                   @unique(map: "users_referal_link_unique") @db.VarChar(255)
  verification_status users_verification_status @default(enum_USER_VERIFICATION_STATUS_UNVERIFIED)
  derniere_connexion  DateTime?                 @db.DateTime(0)
  remember_token      String?                   @db.VarChar(100)
  created_at          DateTime                  @default(now()) @db.DateTime(0)
  updated_at          DateTime                  @db.DateTime(0)
  deleted_at          DateTime?                 @db.DateTime(0)
  discussion_owners   discussion_owners[]
  documents           documents[]
  message_owners      message_owners[]
  countries           countries                 @relation(fields: [country_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_country_id_foreign")

  @@index([country_id], map: "users_country_id_foreign")
}

model winnings {
  id                    BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  montant_total         String   @db.VarChar(255)
  montant_total_numeric Float
  created_at            DateTime @default(now()) @db.DateTime(0)
  updated_at            DateTime @db.DateTime(0)
}

enum payment_methods_libelle {
  enum_PAYMENT_METHOD_TYPE_CARD @map("enum.PAYMENT_METHOD_TYPE.CARD")
  enum_PAYMENT_METHOD_TYPE_MOMO @map("enum.PAYMENT_METHOD_TYPE.MOMO")
  enum_PAYMENT_METHOD_TYPE_OM   @map("enum.PAYMENT_METHOD_TYPE.OM")
}

enum discussions_type {
  personal
  group
}

enum document_autorises_type {
  enum_DOCUMENT_TYPE_CNI              @map("enum.DOCUMENT_TYPE.CNI")
  enum_DOCUMENT_TYPE_SELFIE           @map("enum.DOCUMENT_TYPE.SELFIE")
  enum_DOCUMENT_TYPE_PASSPORT         @map("enum.DOCUMENT_TYPE.PASSPORT")
  enum_DOCUMENT_TYPE_PERMIS_CONDUIRE  @map("enum.DOCUMENT_TYPE.PERMIS_CONDUIRE")
  enum_DOCUMENT_TYPE_PREUVE_RESIDENCE @map("enum.DOCUMENT_TYPE.PREUVE_RESIDENCE")
}

enum documents_statuts {
  enum_DOCUMENT_STATUS_VERIFIED @map("enum.DOCUMENT_STATUS.VERIFIED")
  enum_DOCUMENT_STATUS_REFUSED  @map("enum.DOCUMENT_STATUS.REFUSED")
  enum_DOCUMENT_STATUS_PENDING  @map("enum.DOCUMENT_STATUS.PENDING")
}

enum payments_statut {
  enum_PAYMENT_STATUS_SUCCESS @map("enum.PAYMENT_STATUS.SUCCESS")
  enum_PAYMENT_STATUS_FAILED  @map("enum.PAYMENT_STATUS.FAILED")
  enum_PAYMENT_STATUS_PENDING @map("enum.PAYMENT_STATUS.PENDING")
}

enum comptes_statut {
  actif
  inactif
}

enum tirages_statut {
  enum_TIRAGE_STATUS_ENCOURS @map("enum.TIRAGE_STATUS.ENCOURS")
  enum_TIRAGE_STATUS_TERMINE @map("enum.TIRAGE_STATUS.TERMINE")
  enum_TIRAGE_STATUS_ATTENTE @map("enum.TIRAGE_STATUS.ATTENTE")
}

enum tirages_type {
  enum_TICKET_TYPE_BONUS  @map("enum.TICKET_TYPE.BONUS")
  enum_TICKET_TYPE_NORMAL @map("enum.TICKET_TYPE.NORMAL")
}

enum tickets_type {
  enum_TICKET_TYPE_BONUS  @map("enum.TICKET_TYPE.BONUS")
  enum_TICKET_TYPE_NORMAL @map("enum.TICKET_TYPE.NORMAL")
}

enum tickets_statut {
  enum_TICKET_STATUS_ACTIF   @map("enum.TICKET_STATUS.ACTIF")
  enum_TICKET_STATUS_EXPIRE  @map("enum.TICKET_STATUS.EXPIRE")
  enum_TICKET_STATUS_UTILISE @map("enum.TICKET_STATUS.UTILISE")
}

enum tickets_gagnant {
  enum_TICKET_GAGNANT_GAGNANT    @map("enum.TICKET_GAGNANT.GAGNANT")
  enum_TICKET_GAGNANT_PERDANT    @map("enum.TICKET_GAGNANT.PERDANT")
  enum_TICKET_GAGNANT_NON_DEFINI @map("enum.TICKET_GAGNANT.NON_DEFINI")
}

enum users_verification_status {
  enum_USER_VERIFICATION_STATUS_VERIFIED   @map("enum.USER_VERIFICATION_STATUS.VERIFIED")
  enum_USER_VERIFICATION_STATUS_PENDING    @map("enum.USER_VERIFICATION_STATUS.PENDING")
  enum_USER_VERIFICATION_STATUS_UNVERIFIED @map("enum.USER_VERIFICATION_STATUS.UNVERIFIED")
}
